Description: <short summary of the patch>
 TODO: Put a short summary on the line above and replace this paragraph
 with a longer explanation of this change. Complete the meta-information
 with other relevant fields (see below for details). To make it easier, the
 information below has been extracted from the changelog. Adjust it or drop
 it.
 .
 securityonion-sguil-agent-ossec (20120726-0ubuntu0securityonion10) precise; urgency=low
 .
   * Issue 717: ossec_agent: send alerts to sguild immediately instead of waiting for next alert
Author: Doug Burks <doug.burks@gmail.com>

---
The information above should follow the Patch Tagging Guidelines, please
checkout http://dep.debian.net/deps/dep3/ to learn about the format. Here
are templates for supplementary fields that you might want to add:

Origin: <vendor|upstream|other>, <url of original patch>
Bug: <url in upstream bugtracker>
Bug-Debian: http://bugs.debian.org/<bugnumber>
Bug-Ubuntu: https://launchpad.net/bugs/<bugnumber>
Forwarded: <no|not-needed|url proving that it has been forwarded>
Reviewed-By: <name and email of someone who approved the patch>
Last-Update: <YYYY-MM-DD>

--- securityonion-sguil-agent-ossec-20120726.orig/etc/nsm/ossec/ossec_agent.tcl
+++ securityonion-sguil-agent-ossec-20120726/etc/nsm/ossec/ossec_agent.tcl
@@ -188,8 +188,8 @@ proc ResolveHostname { hostName } {
            # default value.
            set retVal "0.0.0.0"
        } else {
-                set retVal "0.0.0.0"
-        }
+           set retVal "0.0.0.0"
+       }
    }
 
 
@@ -200,15 +200,93 @@ proc ResolveHostname { hostName } {
 # ProcessData: Here we actually process the line
 #
 proc ProcessData { line } {
+    global AGENT_TYPE
+    global nDate sig_id priority message src_ip user hexPayload payload agent src_port dst_port
+
+    # We do not care about the first line of an alert so find it and forget it
+    if { [regexp {(?x) ^\*\*\s+Alert} $line] } {
+        # nothing to do as we ignore this line
+
+        # See if this looks like a date line (the alert header, not the
+        # syslog line, which also begins with a date)
+        # look for logs sent by a OSSEC agent that should be treated as syslogs; e.g. Malwarebytes logs
+    } elseif { ([regexp {(?x)
+#           ^(\d\d\d\d)\s+(...)\s+(\d\d)\s+(\d\d:\d\d:\d\d)\s+(.*)->
+#         ^(\d\d\d\d)\s+(...)\s+(\d\d)\s+(\d\d:\d\d:\d\d)\s+(\(.*\)\s+)*(.*)->
+                 ^(\d\d\d\d)\s+(...)\s+(\d\d)\s+(\d\d:\d\d:\d\d)\s+(\(.*\)\s+)*(\S+)->
+                 } $line MatchVar year month day time placeholder agent]) } {
+        set nDate [clock format [clock scan "$day $month $year $time" ] -gmt true -f "%Y-%m-%d %T"]
+        # Ok, this is confusing, but the regexp can return either one
+        # or two variables, depending on the format of the input line.
+        # if the line is from a windows agent, it will usually contain
+        # "(host) X.X.X.X", but if it's from some other agent, it will
+        # usually just be one field (either a hostname or an IP address,
+        # depending on the log source).  In either case, the $agent
+        # variable ends up holding the correct value for our purposes.
+        set agent [ResolveHostname $agent]
+    } elseif { [regexp {(?x)
+                 ^Rule:\s+(\d+)\s+\(level\s+(\d+)\)\s+->\s+'(.*)'
+                 } $line MatchVar sig_id priority message ] } {
+        set message "\[[string toupper $AGENT_TYPE]\] $message"
+    } elseif { [regexp {(?x)
+                 ^User:\s+(.*)
+                } $line MatchVar user ] } {
+        # We really don't have anything to do here, since we matched all
+        # our variables directly in the conditional for this block
+    } elseif { [regexp {(?x)
+                 ^Src\s+IP:\s+(.*)
+                 } $line MatchVar src_ip ] } {
+        set src_ip [ResolveHostname $src_ip]
+    } elseif { [regexp {(?x)
+                 ^Src\s+Port:\s+(\d+)
+                 } $line MatchVar src_port ] } {
+        # nothing to do as regexp filled the var
+    } elseif { [regexp {(?x)
+                 ^Dst\s+IP:\s+(.*)
+                 } $line MatchVar agent ] } {
+        set agent [ResolveHostname $agent]
+    } elseif { [regexp {(?x)
+                 ^Dst\s+Port:\s+(\d+)
+                 } $line MatchVar dst_port ] } {
+        # nothing to do as regexp filled the var
+    # check to see if this is a blank line
+    # if it is then we've reached the end of the alert and can now send it to Sguil
+    } elseif { [regexp {(?x) ^\s*$} $line] } {
+        SendAlert
+    # If we haven't matched anything specific in the OSSEC alert
+    # structure, this must be a copy of the original alert.
+    # Add it to our payload.
+    } else {
+        set payload "$line\n"
+    }
+}
 
+#
+# Send alert to Sguil once all of its lines have been parsed
+#
+proc SendAlert {} {
     global HOSTNAME IPADDR AGENT_ID NEXT_EVENT_ID AGENT_TYPE GEN_ID
     global MIN_PRIORITY
     global sguildSocketID DEBUG
     global nDate sig_id priority message src_ip user hexPayload payload agent src_port dst_port
 
-    if { [regexp {(?x)
-        ^\*\*\s+Alert
-    } $line] } {
+    # If we meet the minimum priority threshold to issue an alert,
+    # do it here.
+    if { $priority >= $MIN_PRIORITY } {
+        if {$DEBUG} {
+           puts "Found Alert: "
+           puts "\ttime: $nDate"
+           puts "\tAgent: $agent"
+           puts "\tSigID: $sig_id"
+           puts "\tPriority: $priority"
+           puts "\tSrcIP: $src_ip"
+           puts "\tUser: $user"
+           puts "\tMessage: $message"
+           puts "\tPayload: $payload"
+           puts "\tSrcPort: $src_port"
+           puts "\tDstPort: $dst_port"
+           puts "\n"
+        }
 
         # Make some last minute adjustments to format everything properly
         if {$src_ip == "(none)" || \
@@ -219,150 +297,74 @@ proc ProcessData { line } {
             $agent == "UNKNOWN" || \
             $agent == ""} { set agent "0.0.0.0" }
 
-        # If we meet the minimum priority threshold to issue an alert,
-        # do it here.
-        if { $priority >= $MIN_PRIORITY } {
-            if {$DEBUG} {
-                puts "Found Alert: "
-                puts "\ttime: $nDate"
-                puts "\tAgent: $agent"
-                puts "\tSigID: $sig_id"
-                puts "\tPriority: $priority"
-                puts "\tSrcIP: $src_ip"
-                puts "\tUser: $user"
-                puts "\tMessage: $message"
-                puts "\tPayload: $payload"
-                puts "\tSrcPort: $src_port"
-                puts "\tDstPort: $dst_port"
-                puts "\n"
-            }
-
-            set event [list GenericEvent 0 $priority {} \
-                           $HOSTNAME $nDate $AGENT_ID $NEXT_EVENT_ID \
-                           $NEXT_EVENT_ID [string2hex $message] \
-                           $src_ip $agent {} $src_port $dst_port \
-                           $GEN_ID $sig_id 1 [string2hex $payload]]
-
-            # Send the event to sguild
-            if { $DEBUG } { puts "Sending: $event" }
-            while { [catch {puts $sguildSocketID $event} tmpError] } {
-
-                # Send to sguild failed
-                if { $DEBUG } { puts "Send Failed: $tmpError" }
-
-                # Close open socket
-                catch {close $sguildSocketID}
-
-                # Reconnect loop
-                while { ![ConnectToSguilServer] } { after 15000 }
-
-            }
-
-            # Sguild response should be "ConfirmEvent eventID"
-            if { [catch {gets $sguildSocketID response} readError] } {
-
-                # Couldn't read from sguild
-                if { $DEBUG } { puts "Read Failed: $readError" }
-
-                # Close open socket
-                catch {close $sguildSocketID}
-
-                # Reconnect loop
-                while { ![ConnectToSguilServer] } { after 15000 }
-                return 0
-
-            }
-            if {$DEBUG} { puts "Received: $response" }
-
-            if { [llength $response] != 2 || [lindex $response 0] != "ConfirmEvent" || [lindex $response 1] != $NEXT_EVENT_ID } {
-
-                # Send to sguild failed
-                if { $DEBUG } { puts "Recv Failed" }
-
-                # Close open socket
-                catch {close $sguildSocketID}
-
-                # Reconnect loop
-                while { ![ConnectToSguilServer] } { after 15000 }
-                return 0
+        set event [list GenericEvent 0 $priority {} \
+                       $HOSTNAME $nDate $AGENT_ID $NEXT_EVENT_ID \
+                       $NEXT_EVENT_ID [string2hex $message] \
+                       $src_ip $agent {} $src_port $dst_port \
+                       $GEN_ID $sig_id 1 [string2hex $payload]]
+
+        # Send the event to sguild
+        if { $DEBUG } { puts "Sending: $event" }
+        while { [catch {puts $sguildSocketID $event} tmpError] } {
+
+            # Send to sguild failed
+            if { $DEBUG } { puts "Send Failed: $tmpError" }
+
+            # Close open socket
+            catch {close $sguildSocketID}
 
-            }
+            # Reconnect loop
+            while { ![ConnectToSguilServer] } { after 15000 }
 
-            # Success! Increment the next event id
-            incr NEXT_EVENT_ID
         }
 
-        # Now clear all these vars for the next event
-        set nDate ""
-        set sig_id ""
-        set priority ""
-        set src_ip ""
-        set user ""
-        set message ""
-        set payload ""
-        set hexPayload ""
-        set src_port ""
-        set dst_port ""
+        # Sguild response should be "ConfirmEvent eventID"
+        if { [catch {gets $sguildSocketID response} readError] } {
+
+            # Couldn't read from sguild
+            if { $DEBUG } { puts "Read Failed: $readError" }
+
+            # Close open socket
+            catch {close $sguildSocketID}
+
+            # Reconnect loop
+            while { ![ConnectToSguilServer] } { after 15000 }
+            return 0
 
-    } else {
-        # See if this looks like a date line (the alert header, not the
-        # syslog line, which also begins with a date)
-        # look for logs sent by a OSSEC agent that should be treated as syslogs; e.g. Malwarebytes logs
-        if { ([regexp {(?x)
-	# ^(\d\d\d\d)\s+(...)\s+(\d\d)\s+(\d\d:\d\d:\d\d)\s+(.*)->
-	# ^(\d\d\d\d)\s+(...)\s+(\d\d)\s+(\d\d:\d\d:\d\d)\s+(\(.*\)\s+)*(.*)->
-	# This last regex would incorrectly look for -> anywhere in the line,
-	# which would catch some logs that it shouldn't, like:
-	# 2015 Apr 27 08:54:27 WinEvtLog: Application: ERROR(100): Bonjour Service: (no user): no domain: agent001: Task Scheduling Error: m->NextScheduledSPRetry 99999
-	# Instead, we need to avoid looking for -> anywhere in the line and only look for it anchored to a hostname or IP address: 
-	# 2015 Apr 17 18:52:50 securityonion->/var/log/syslog
-	# 2015 Apr 27 12:54:26 (agent001) 192.168.2.5->WinEvtLog
-	^(\d\d\d\d)\s+(...)\s+(\d\d)\s+(\d\d:\d\d:\d\d)\s+(\(.*\)\s+)*(\S+)->
-        } $line MatchVar year month day time placeholder agent]) } {
-            set nDate [clock format [clock scan "$day $month $year $time" ] -gmt true -f "%Y-%m-%d %T"]
-            # Ok, this is confusing, but the regexp can return either one
-            # or two variables, depending on the format of the input line.
-            # if the line is from a windows agent, it will usually contain
-            # "(host) X.X.X.X", but if it's from some other agent, it will
-            # usually just be one field (either a hostname or an IP address,
-            # depending on the log source).  In either case, the $agent
-            # variable ends up holding the correct value for our purposes.
-            set agent [ResolveHostname $agent]
-        } elseif { [regexp {(?x)
-                     ^Rule:\s+(\d+)\s+\(level\s+(\d+)\)\s+->\s+'(.*)'
-        } $line MatchVar sig_id priority message ] } {
-            set message "\[[string toupper $AGENT_TYPE]\] $message"
-        } elseif { [regexp {(?x)
-                      ^User:\s+(.*)
-        } $line MatchVar user ] } {
-            # We really don't have anything to do here, since we matched all
-            # our variables directly in the conditional for this block
-        } elseif { [regexp {(?x)
-                      ^Src\s+IP:\s+(.*)
-        } $line MatchVar src_ip ] } {
-            set src_ip [ResolveHostname $src_ip]
-        } elseif { [regexp {(?x)
-                      ^Src\s+Port:\s+(\d+)
-        } $line MatchVar src_port ] } {
-            # nothing to do regexp filled the var
-        } elseif { [regexp {(?x)
-                      ^Dst\s+IP:\s+(.*)
-        } $line MatchVar agent ] } {
-            set agent [ResolveHostname $agent]
-        } elseif { [regexp {(?x)
-                      ^Dst\s+Port:\s+(\d+)
-        } $line MatchVar dst_port ] } {
-            # nothing to do regexp filled the var
-        } else {
-            # If we haven't matched anything specific in the OSSEC alert
-            # structure, this must be a copy of the original alert.
-            # Add it to our payload.
-            append payload "$line\n"
         }
+        if {$DEBUG} { puts "Received: $response" }
+
+        if { [llength $response] != 2 || [lindex $response 0] != "ConfirmEvent" || [lindex $response 1] != $NEXT_EVENT_ID } {
 
+            # Send to sguild failed
+            if { $DEBUG } { puts "Recv Failed" }
+
+            # Close open socket
+            catch {close $sguildSocketID}
+
+            # Reconnect loop
+            while { ![ConnectToSguilServer] } { after 15000 }
+            return 0
+
+        }
+
+        # Success! Increment the next event id
+        incr NEXT_EVENT_ID
     }
-}
 
+    # Now clear all these vars for the next event
+    set nDate ""
+    set sig_id ""
+    set priority ""
+    set src_ip ""
+    set user ""
+    set message ""
+    set payload ""
+    set hexPayload ""
+    set src_port ""
+    set dst_port ""
+    set agent ""
+}
 
 # Initialize connection to sguild
 proc ConnectToSguilServer {} {
